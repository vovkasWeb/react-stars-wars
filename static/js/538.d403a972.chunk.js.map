{"version":3,"file":"static/js/538.d403a972.chunk.js","mappings":"gJACA,SAAgB,QAAU,6BAA6B,UAAY,+BAA+B,WAAa,gCAAgC,cAAgB,mCAAmC,YAAc,iCAAiC,YAAc,kC,+BCI/P,MAiCA,EAjCoBA,IAAsB,IAArB,YAAEC,GAAaD,EACnC,MAAOE,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,IAW3C,OATAC,EAAAA,EAAAA,YAAU,KACT,WACC,MAAMC,EAAaL,EAAYM,KAAIC,IAAOC,EAAAA,EAAAA,IAAWD,KACtCE,QAAiBC,EAAAA,EAAAA,IAAsBL,GAE7CH,EAAaO,EACtB,EALD,EAKI,KAIJE,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAOC,QAAQC,UAC9BJ,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAOG,gBAAgBD,SACpCd,EACCgB,MAAK,CAACC,EAAGC,IAAMD,EAAEE,WAAaD,EAAEC,aAChCd,KAAIe,IAAA,IAAC,MAAEC,EAAK,WAAEF,GAAYC,EAAA,OAC1BE,EAAAA,EAAAA,MAAA,MAAIX,UAAWC,EAAOW,WAAWT,SAAA,EAChCQ,EAAAA,EAAAA,MAAA,QAAMX,UAAWC,EAAOY,cAAcV,SAAA,CAAC,WAASK,MAChDT,EAAAA,EAAAA,KAAA,QAAMC,UAAWC,EAAOa,YAAYX,SAAC,OACrCJ,EAAAA,EAAAA,KAAA,QAAMC,UAAWC,EAAOc,YAAYZ,SAAEO,MAHAF,EAIlC,OAGH,C","sources":["webpack://react-stars-wars/./src/companents/PersonPage/PersonFilms/PersonFilms.module.css?1eac","companents/PersonPage/PersonFilms/PersonFilms.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"PersonFilms_wrapper__hpld3\",\"container\":\"PersonFilms_container__CHv13\",\"list__item\":\"PersonFilms_list__item__lt91Z\",\"item__episide\":\"PersonFilms_item__episide__cQvza\",\"item__colon\":\"PersonFilms_item__colon__Cr7ns\",\"item__title\":\"PersonFilms_item__title__HI3JV\"};","import PropTypes from 'prop-types'\r\nimport styles from './PersonFilms.module.css'\r\nimport { useEffect, useState } from 'react'\r\nimport { changeHTTP, makeConcurrentRequest } from '../../../utils/network'\r\n\r\nconst PersonFilms = ({ personFilms }) => {\r\n\tconst [filmsName, setFilmsName] = useState([])\r\n\r\n\tuseEffect(() => {\r\n\t\t(async () => {\r\n\t\t\tconst filmsHTTPS = personFilms.map(url => changeHTTP(url));\r\n            const response = await makeConcurrentRequest(filmsHTTPS);\r\n\r\n            setFilmsName(response);\r\n\t\t})()\r\n\t})\r\n\r\n\treturn (\r\n\t\t<div className={styles.wrapper}>\r\n\t\t\t<ul className={styles.list__container}>\r\n\t\t\t\t{filmsName\r\n\t\t\t\t\t.sort((a, z) => a.episode_id - z.episode_id)\r\n\t\t\t\t\t.map(({ title, episode_id }) => (\r\n\t\t\t\t\t\t<li className={styles.list__item} key={episode_id}>\r\n\t\t\t\t\t\t\t<span className={styles.item__episide}>Episode {episode_id}</span>\r\n\t\t\t\t\t\t\t<span className={styles.item__colon}>:</span>\r\n\t\t\t\t\t\t\t<span className={styles.item__title}>{title}</span>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nPersonFilms.propTypes = {\r\n\tpersonFilms: PropTypes.array,\r\n}\r\n\r\nexport default PersonFilms\r\n"],"names":["_ref","personFilms","filmsName","setFilmsName","useState","useEffect","filmsHTTPS","map","url","changeHTTP","response","makeConcurrentRequest","_jsx","className","styles","wrapper","children","list__container","sort","a","z","episode_id","_ref2","title","_jsxs","list__item","item__episide","item__colon","item__title"],"sourceRoot":""}